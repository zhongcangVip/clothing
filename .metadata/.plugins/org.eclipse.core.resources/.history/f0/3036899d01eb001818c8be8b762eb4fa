package com.house.framework.util;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.aliyun.oss.OSSClient;
import com.aliyun.oss.model.CannedAccessControlList;
import com.aliyun.oss.model.CreateBucketRequest;
import com.aliyun.oss.model.OSSObject;

/**
 * ftp 文件上传工具类
 * 
 * @author yangmin
 * @Date 2018年11月12日
 */
public class OssFileUtils {

	private final static Logger logger = LoggerFactory.getLogger(OssFileUtils.class);

	private static OssFileUtils instance = new OssFileUtils();

	private final String accessKeySecret = "fTLykPgCzApi5shQwDsS0btur8d2j9";// Global.getOssSecret();
	private final String accessKeyId = "LTAIITN7SSGCbUiB";// Global.getOssKey();
	private final String endpoint = "oss-cn-beijing.aliyuncs.com";// Global.getOssEndPoint();
	private final String bucketName = "house-read";
	// 创建OSSClient实例。
	private OSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);

	private OssFileUtils() {
	};

	public static OssFileUtils getOssFileObject() {
		return instance;
	}

	/**
	 * 普通的文本上传保存
	 * 
	 * @param key
	 * @param content
	 */
	public String uploadFile(String key, String content,boolean over) {
		String result="";
		try {
//			initBucket(ossClient, bucketName);
			boolean exists=ossClient.doesObjectExist(bucketName, key);
			if(exists) {//目标存在
				if(over) {
					ossClient.putObject(bucketName, key, new ByteArrayInputStream(content.getBytes()));
					result=getOssFileUrl(key);
				}else {
					result="上传失败，目标对象已存在!";
				}
			}else {
				ossClient.putObject(bucketName, key, new ByteArrayInputStream(content.getBytes()));
				result=getOssFileUrl(key);
			}
		} finally {
			// 关闭OSSClient。
			ossClient.shutdown();
		}
		return result;
	}

	
	
	/**
	 * 普通的文本上传保存
	 * 
	 * @param key
	 * @param content
	 */
	public String uploadFileByUrl(String key, String url,boolean over) {
		String result="";
		InputStream inputStream =null;
		try {
			inputStream= new URL(url).openStream();
//			initBucket(ossClient, bucketName);
//			boolean exists=ossClient.doesObjectExist(bucketName, key);
			boolean exists=true;
			if(exists) {//目标存在
				if(over) {
					
					ossClient.putObject(bucketName, key, inputStream);
					result=getOssFileUrl(key);
				}else {
					result="上传失败，目标对象已存在!";
				}
			}else {
				ossClient.putObject(bucketName, key,inputStream);
				result=getOssFileUrl(key);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			// 关闭OSSClient。
			ossClient.shutdown();
		}
		return result;
	}

	/**
	 * 文件流上传
	 * 
	 * @param inputStream
	 * @param key 存放在OSS 中的目标对象名称,可以在前面加目录
	 * @param over 当目标存在时，是否强制覆盖,如果不覆盖，则不进行上传操作
	 * @return 
	 */
	public String uploadFile(InputStream inputStream, String key,boolean over ) {
		String result="";
		try {
			initBucket(ossClient, bucketName);
			boolean exists=ossClient.doesObjectExist(bucketName, key);
			if(exists) {//目标存在
				if(over) {
					ossClient.putObject(bucketName, key, inputStream);
					result=getOssFileUrl(key);
				}else {
					result="上传失败，目标对象已存在!";
				}
			}else {
				ossClient.putObject(bucketName, key, inputStream);
				result=getOssFileUrl(key);
			}
		} finally {
			// 关闭OSSClient。
			ossClient.shutdown();
		}
		return result;
	}

	/**
	 * 简单文件上传
	 * 
	 * @param file
	 * @param key
	 */
	public String uploadFile(File file, String key,boolean over) {
		String result="";
		try {
			initBucket(ossClient, bucketName);
			boolean exists=ossClient.doesObjectExist(bucketName, key);
			if(exists) {//目标存在
				if(over) {
					ossClient.putObject(bucketName, key, file);
					result=getOssFileUrl(key);
				}else {
					result="上传失败，目标对象已存在!";
				}
			}else {
				ossClient.putObject(bucketName, key, file);
				result=getOssFileUrl(key);
			}
		} finally {
			// 关闭OSSClient。
			ossClient.shutdown();
		}
		return result;
	}

	private String getOssFileUrl(String key) {
		String result = "http://" + bucketName + "." + endpoint + "/" + key;
		logger.info("文件上传返回URL:" + result);
		return result;
	}

	/**
	 * bucket 处理，如果不存在就创建
	 * 
	 * @param ossClient
	 * @param bucketName
	 */
	private void initBucket(OSSClient ossClient, String bucketName) {
		if (!ossClient.doesBucketExist(bucketName)) {
			ossClient.createBucket(bucketName);
			CreateBucketRequest createBucketRequest = new CreateBucketRequest(bucketName);
			createBucketRequest.setCannedACL(CannedAccessControlList.PublicRead);
			ossClient.createBucket(createBucketRequest);
		}
	}

	public static void main(String[] args) {
		String url=OssFileUtils.getOssFileObject().uploadFile(new File("e://1.png"), "xx/c.png",true);
		System.err.println(url);
	}
}
