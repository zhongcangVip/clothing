package com.clothing.controller.item;

import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.clothing.common.ResultUtil;
import com.clothing.controller.base.BaseController;
import com.clothing.model.base.Pagination;
import com.clothing.model.base.Result;
import com.clothing.model.item.Item;
import com.clothing.model.item.ItemCategory;
import com.clothing.model.item.ItemSupplier;
import com.clothing.model.item.ItemUnit;
import com.clothing.model.vo.ItemVo;
import com.clothing.model.vo.PaginationCondition;
import com.clothing.model.vo.item.ItemSearchVo;
import com.clothing.service.ItemCategoryService;
import com.clothing.service.ItemService;
import com.clothing.service.ItemSupplierService;
import com.clothing.service.ItemUnitService;

@Controller
@RequestMapping(value="item")
public class ItemController extends BaseController{
	
	@Autowired
	private ItemService itemService;
	@Autowired
	private ItemCategoryService categoryService;
	@Autowired
	private ItemUnitService unitService;
	@Autowired
	private ItemSupplierService supplierService;
	

	@RequestMapping(value="list")
	public String index(){
		return "item/itemList";
	}
	
	
	@RequestMapping(value="listData")
	@ResponseBody
	public Pagination<Item> listData(@Validated PaginationCondition<Map<String,Object>> condition){
		return this.itemService.getItemByPagination(condition.getPage(), condition.getPageSize(), condition.getCondition());
	}
	
	@RequestMapping(value="addOrEdit")
	public String addOrEdit(ModelMap model){
		String id=this.getString("id");
		if(StringUtils.isNotBlank(id)){
			Item item=this.itemService.getItemById(id);
			model.put("item", item);
		}
		return "item/itemInfo";	
	}
	
	
	@RequestMapping(value="submit")
	@ResponseBody
	public Result submit(@Validated ItemVo item){	
		Item itemDto=new Item();
		
		BeanUtils.copyProperties(item, itemDto);
		if(StringUtils.isNotBlank(item.getCategory())){
			ItemCategory category=this.categoryService.getItemCategoryById(item.getCategory());
			itemDto.setCategory(category);
		}
		if(StringUtils.isNotBlank(item.getSupplier())){
			ItemSupplier supplier=this.supplierService.getItemSupplierById(item.getSupplier());
			itemDto.setSupplier(supplier);
		}
		if(StringUtils.isNotBlank(item.getUnit())){
			ItemUnit unit=this.unitService.getItemUnitById(item.getUnit());
			itemDto.setUnit(unit);
		}
		if(StringUtils.isNotBlank(item.getId())){
			this.itemService.updateIntem(itemDto);
		}else{
			this.itemService.insertItem(itemDto);
		}		
		return ResultUtil.success();
	}
	
	
	@RequestMapping(value="toView")
	public String toView(ModelMap model,@PathVariable String id){
		if(StringUtils.isNotBlank(id)){
			Item item=this.itemService.getItemById(id);
			model.put("item", item);
		}
		return "";
	}
	
	
}
